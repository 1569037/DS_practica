@startuml
abstract Observable{

}

interface Observer{
+ update(o : Observable, arg : Object)
}

abstract Item{
# name : String
# initTime : LocalDateTime
# endTime : LocalDateTime
# totalTIme : Duration
# active : boolean
# father : Project
# {abstract} getDurationBetween(ini : LocalDateTime, end : LocalDateTime) : Duration
+ {abstract} getTotalTime() : Duration
+ updateEnd(end : LocalDateTime)
+ updateIni(ini : LocalDateTime)
+ updateTotalTime(d : Duration)
+ {abstract} acceptVisitor(v : Visitor)
}


class Project{
+ Project(name : String)
+ Project(name : String, father : Project)
# getDurationBetween(ini : LocalDateTime, end : LocalDateTime) : Duration
+ addTask(task : Task)
+ createNewTask(name : String)
+ createNewProject(name : String)
+ getTotalTime() : Duration
+ acceptVisitor(v : Visitor)
}

class Task{
+ startWorking()
+ stopWorking()
# getDurationBetween(ini : LocalDateTime, end : LocalDateTime) : Duration
+ getTotalTime() : Duration
+ acceptVisitor(v : Visitor)
}

class Interval{
- initTime : LocalDateTime
- endTime : LocalDateTime
- clock : ClockTimer
- duration : Duration
+ stopInterval()
+ getInterval() : Duration
+ update(o : Observable, arg : Object)
+ acceptVisitor(v : Visitor)
+ updateEnd(end : LocalDateTime)
+ updateIni(ini : LocalDateTime)
}

class ClockTimer{
- timer : Timer
- dateTime : LocalDateTime
- {static} instance : ClockTimer
- {static} periode : int
+ {static} getInstance() : ClockTimer
+ start()
+ stop()
}

interface Visitor{
+ visitTask(t : Task);
+ visitInterval(i : Interval);
+ visitProject(p : Project);
}

class Printer{
- clock : ClockTimer
- root : Project
+ Printer(root : Project)
+ visitTask(t : Task)
+ visitInterval(i : Interval)
+ visitProject(p : Project)
+ update(o : Observable, arg : Object)
}

Item <|--- Project
Item <|--- Task
Item "*"<---*"1" Project
Interval "*"<---*"1" Task
Observer <|.. Interval
Observable <|-- ClockTimer
Observer <|.. Printer
Visitor <|.. Printer
@enduml